# .github/workflows/deploy-cloudrun-merged.yml

name: Deploy Backend and Frontend to Cloud Run

on:
  push:
    branches:
      - master # Or your main deployment branch
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment to deploy to
        default: Production - startup-connect-backend # Ensure this environment exists in GitHub

env:
  PYTHON_VERSION: "3.11"

jobs:
  run-migrations:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'Production - startup-connect-backend' }}
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        working-directory: backend
        run: |
          uv sync

      - name: Run database migrations
        working-directory: backend
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
          echo "ðŸš€ Running database migrations..."
          echo "Using database URL from environment variables"
          uv run alembic upgrade head
          echo "âœ… Migrations completed successfully"

      - name: Verify migration completion
        working-directory: backend
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
          echo "Verifying migration status after upgrade:"
          uv run alembic current
          echo "âœ… Migration verification completed"

  deploy-backend:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'Production - startup-connect-backend' }}
    permissions:
      contents: "read"
      id-token: "write" # This is crucial for Workload Identity Federation
    needs: run-migrations # Wait for migrations to complete

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth # Assign an ID to reference outputs
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }} # Use vars if not sensitive, or secrets if preferred
          service_account: ${{ secrets.SA_EMAIL }}
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_FULL_PATH }}

      - name: Set up cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">=413.0.0"

      - name: Set up Google Cloud SDK and Configure Docker
        # automatically sets up Docker credential helper
        # using the credentials from the 'auth' step.
        run: gcloud --quiet auth configure-docker ${{vars.GCP_REGION}}-docker.pkg.dev

      - name: Build and push Backend Docker image to Artifact Registry
        run: |
          # Construct the full image path using the correct Artifact Registry hostname
          # Format: <region>-docker.pkg.dev/<project-id>/<repo-name>/<image-name>:<tag>
          IMAGE_PATH="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.AR_REPO_NAME }}/${{ vars.IMAGE_NAME }}:${{ github.sha }}"

          echo "Building backend image: ${IMAGE_PATH} from Dockerfile: backend/Dockerfile with context: backend"
          docker build -t "${IMAGE_PATH}" -f "backend/Dockerfile" "backend"

          echo "Pushing backend image to Artifact Registry..."
          docker push "${IMAGE_PATH}"

          echo "BACKEND_IMAGE_PATH=${IMAGE_PATH}" >> $GITHUB_ENV # Make image path available to subsequent steps

      - name: Deploy Backend to Cloud Run
        # Using the dedicated Cloud Run deploy action for simplicity and robustness
        uses: "google-github-actions/deploy-cloudrun@v2"
        with:
          service: ${{ vars.CLOUD_RUN_SERVICE_NAME }}
          region: ${{ vars.GCP_REGION }}
          image: "${{ env.BACKEND_IMAGE_PATH }}" # Use the image path from the previous step
          platform: "managed"
          allow_unauthenticated: true # Use 'true' or 'false' for boolean flags
          min_instances: 0
          max_instances: 1
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Get Backend Cloud Run service URL
        # Use the Cloud Run deploy action's output for the URL if available, or gcloud
        run: |
          BACKEND_SERVICE_URL=$(gcloud run services describe ${{ vars.CLOUD_RUN_SERVICE_NAME }} \
            --region "${{ vars.GCP_REGION }}" \
            --project="${{ vars.GCP_PROJECT_ID }}" \
            --format="value(status.url)")
          echo "Backend Cloud Run Service URL: ${BACKEND_SERVICE_URL}"
          echo "BACKEND_SERVICE_URL=${BACKEND_SERVICE_URL}" >> $GITHUB_ENV

  deploy-frontend:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'Production - startup-connect-backend' }}
    permissions:
      contents: "read"
      id-token: "write" # This is crucial for Workload Identity Federation
    needs: [run-migrations, deploy-backend] # Ensure migrations and backend are complete

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth # Assign an ID to reference outputs
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }} # Use vars if not sensitive, or secrets if preferred
          service_account: ${{ secrets.SA_EMAIL }}
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_FULL_PATH }}

      - name: Set up cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">=413.0.0"

      - name: Set up Google Cloud SDK and Configure Docker
        # automatically sets up Docker credential helper
        # using the credentials from the 'auth' step.
        run: gcloud --quiet auth configure-docker ${{vars.GCP_REGION}}-docker.pkg.dev

      - name: Build and push Frontend Docker image to Artifact Registry
        run: |
          # Construct the full image path using the correct Artifact Registry hostname
          # Format: <region>-docker.pkg.dev/<project-id>/<repo-name>/<image-name>:<tag>
          IMAGE_PATH="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.AR_REPO_NAME }}/${{ vars.IMAGE_NAME_SV }}:${{ github.sha }}"

          echo "Building frontend image: ${IMAGE_PATH} from Dockerfile: frontend-sv/Dockerfile with context: frontend-sv"
          docker build -t "${IMAGE_PATH}" -f "frontend-sv/Dockerfile" "frontend-sv"

          echo "Pushing frontend image to Artifact Registry..."
          docker push "${IMAGE_PATH}"

          echo "FRONTEND_IMAGE_PATH=${IMAGE_PATH}" >> $GITHUB_ENV # Make image path available to subsequent steps

      - name: Deploy Frontend to Cloud Run
        # Using the dedicated Cloud Run deploy action for simplicity and robustness
        uses: "google-github-actions/deploy-cloudrun@v2"
        with:
          service: ${{ vars.CLOUD_RUN_SERVICE_NAME_SV }}
          region: ${{ vars.GCP_REGION }}
          image: "${{ env.FRONTEND_IMAGE_PATH }}" # Use the image path from the previous step
          platform: "managed"
          allow_unauthenticated: true # Use 'true' or 'false' for boolean flags
          min_instances: 0
          max_instances: 1
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Get Frontend Cloud Run service URL
        # Use the Cloud Run deploy action's output for the URL if available, or gcloud
        run: |
          FRONTEND_SERVICE_URL=$(gcloud run services describe ${{ vars.CLOUD_RUN_SERVICE_NAME_SV }} \
            --region "${{ vars.GCP_REGION }}" \
            --project="${{ vars.GCP_PROJECT_ID }}" \
            --format="value(status.url)")
          echo "Frontend Cloud Run Service URL: ${FRONTEND_SERVICE_URL}"
          echo "FRONTEND_SERVICE_URL=${FRONTEND_SERVICE_URL}" >> $GITHUB_ENV

      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployment Complete!"
          echo "âœ… Database migrations: Applied successfully"
          echo "âœ… Backend Service URL: ${{ env.BACKEND_SERVICE_URL }}"
          echo "âœ… Frontend Service URL: ${{ env.FRONTEND_SERVICE_URL }}"
